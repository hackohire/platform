service: platformapi

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-south-1
  stage: dev
  environment:
    MONGODB_URL: ${file(./config.js):getEnvVars.${self:provider.stage}.MONGODB_URL}
    # AUTH0_DOMAIN: ${file(./config.js):getEnvVars.${self:provider.stage}.AUTH0_DOMAIN}
    # AUTH0_CLIENT_ID: ${file(./config.js):getEnvVars.${self:provider.stage}.AUTH0_CLIENT_ID}
    # AUTH0_CLIENT_SECRET: ${file(./config.js):getEnvVars.${self:provider.stage}.AUTH0_CLIENT_SECRET}

functions:
  graphql:
    handler: handler.graphqlHandler
    # role: ServiceRole
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"

    # ApiGatewayAuthorizer:
    #   DependsOn:
    #     - ApiGatewayRestApi
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     Name: cognito-authorizer
    #     IdentitySource: method.request.header.Authorization
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - Fn::GetAtt: [CognitoUserPool, Arn]

plugins:
  - serverless-offline
